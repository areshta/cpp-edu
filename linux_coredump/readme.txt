To get coredump you needs
1. switch on logs
    ulimit -c unlimited
2. The project must be built with debug symbols (-g)
    c++ -g crash.cpp -o crash
3. After coredump was occurred it ould be placed in different folders:
    ls /var/crash
    ls /var/lib/apport/coredump/
    in ubuntu tha path could be found in /var/log/apport.log
4. The coredump info could be read by gdb
    gdb bib-file coredum-file
5. Stack trace can be output by gdb command bt
    (gdb)bt

Output example:

alex@oagw-vb:~/working/cpp-edu/linux_coredump$ gdb crash core._home_alex_working_cpp-edu_linux_coredump_crash.1000.ff0f0919-51dd-4cd9-a7f9-30fd4173207a.28657.137693233 
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from crash...done.
[New LWP 28657]
Core was generated by `./crash'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  crash () at crash.cpp:6
6	    n[100]=5;
(gdb) bt
#0  crash () at crash.cpp:6
#1  0x000055643b499808 in main () at crash.cpp:12
(gdb) quit





